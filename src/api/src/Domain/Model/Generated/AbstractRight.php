<?php
/**
 * This file has been automatically generated by TDBM.
 *
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the Right class instead!
 */

declare(strict_types=1);

namespace App\Domain\Model\Generated;

use App\Domain\Model\Role;
use TheCodingMachine\TDBM\AbstractTDBMObject;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use JsonSerializable;
use TheCodingMachine\TDBM\Schema\ForeignKeys;
use TheCodingMachine\GraphQLite\Annotations\Field as GraphqlField;

/**
 * The AbstractRight class maps the 'rights' table in database.
 */
abstract class AbstractRight extends \TheCodingMachine\TDBM\AbstractTDBMObject implements JsonSerializable
{

    /**
     * @var \TheCodingMachine\TDBM\Schema\ForeignKeys
     */
    private static $foreignKeys = null;

    /**
     * The constructor takes all compulsory arguments.
     *
     * @param string $name
     * @param string $code
     */
    public function __construct(string $name, string $code)
    {
        parent::__construct();
        $this->setName($name);
        $this->setCode($code);
        $this->setId(Uuid::uuid1()->toString());
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     * @GraphqlField (outputType = "ID")
     */
    public function getId() : string
    {
        return $this->get('id', 'rights');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'rights');
    }

    /**
     * The getter for the "name" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getName() : string
    {
        return $this->get('name', 'rights');
    }

    /**
     * The setter for the "name" column.
     *
     * @param string $name
     */
    public function setName(string $name) : void
    {
        $this->set('name', $name, 'rights');
    }

    /**
     * The getter for the "code" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getCode() : string
    {
        return $this->get('code', 'rights');
    }

    /**
     * The setter for the "code" column.
     *
     * @param string $code
     */
    public function setCode(string $code) : void
    {
        $this->set('code', $code, 'rights');
    }

    /**
     * Returns the list of Role associated to this bean via the roles_rights pivot table.
     *
     * @return \App\Domain\Model\Role[]
     * @GraphqlField
     */
    public function getRoles() : array
    {
        return $this->_getRelationships('roles_rights.right_id');
    }

    /**
     * Adds a relationship with Role associated to this bean via the roles_rights pivot table.
     *
     * @param \App\Domain\Model\Role $role
     */
    public function addRole(\App\Domain\Model\Role $role) : void
    {
        $this->addRelationship('roles_rights', $role);
    }

    /**
     * Deletes the relationship with Role associated to this bean via the roles_rights pivot table.
     *
     * @param \App\Domain\Model\Role $role
     */
    public function removeRole(\App\Domain\Model\Role $role) : void
    {
        $this->_removeRelationship('roles_rights', $role);
    }

    /**
     * Returns whether this bean is associated with Role via the roles_rights pivot table.
     *
     * @param \App\Domain\Model\Role $role
     * @return bool
     */
    public function hasRole(\App\Domain\Model\Role $role) : bool
    {
        return $this->hasRelationship('roles_rights.right_id', $role);
    }

    /**
     * Sets all relationships with Role associated to this bean via the roles_rights pivot table.
     * Exiting relationships will be removed and replaced by the provided relationships.
     *
     * @param \App\Domain\Model\Role[] $roles
     * @return void
     */
    public function setRoles(array $roles) : void
    {
        $this->setRelationships('roles_rights.right_id', $roles);
    }

    /**
     * Get the paths used for many to many relationships methods.
     *
     * @internal
     */
    public function _getManyToManyRelationshipDescriptor(string $pathKey) : \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor
    {
        switch ($pathKey) {
            case 'roles_rights.right_id':
                return new \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor('roles', 'roles_rights', ['id'], ['role_id'], ['right_id']);
            default:
                return parent::_getManyToManyRelationshipDescriptor($pathKey);
        }
    }

    /**
     * Returns the list of keys supported for many to many relationships
     *
     * @internal
     * @return string[]
     */
    public function _getManyToManyRelationshipDescriptorKeys() : array
    {
        return array_merge(parent::_getManyToManyRelationshipDescriptorKeys(), ['roles_rights.right_id']);
    }

    /**
     * Internal method used to retrieve the list of foreign keys attached to this bean.
     */
    protected static function getForeignKeys(string $tableName) : \TheCodingMachine\TDBM\Schema\ForeignKeys
    {
        if ($tableName === 'rights') {
            if (self::$foreignKeys === null) {
                self::$foreignKeys = new ForeignKeys([

                ]);
            }
            return self::$foreignKeys;
        }
        return parent::getForeignKeys($tableName);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded
     * objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize(bool $stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        $array['name'] = $this->getName();
        $array['code'] = $this->getCode();
        if (!$stopRecursion) {
            $array['roles'] = array_map(function (Role $object) {
                return $object->jsonSerialize(true);
            }, $this->getRoles());
        };
        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child
     * relationship).
     *
     * @return string[]
     */
    public function getUsedTables() : array
    {
        return [ 'rights' ];
    }

    public function __clone()
    {
        $this->getRoles();

        parent::__clone();
        $this->setId(Uuid::uuid1()->toString());
    }
}
