<?php
/**
 * This file has been automatically generated by TDBM.
 *
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the User class instead!
 */

declare(strict_types=1);

namespace App\Domain\Model\Generated;

use App\Domain\Model\User;
use App\Domain\Model\UserType;
use App\Domain\Model\Company;
use App\Domain\Model\FileDescriptor;
use App\Domain\Model\Document;
use App\Domain\Model\EventModel;
use App\Domain\Model\Event;
use App\Domain\Model\ProgramModel;
use App\Domain\Model\Program;
use App\Domain\Model\ResetPasswordToken;
use App\Domain\Model\Role;
use App\Domain\Model\UpdateEmailToken;
use TheCodingMachine\TDBM\AbstractTDBMObject;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use JsonSerializable;
use TheCodingMachine\TDBM\Schema\ForeignKeys;
use TheCodingMachine\GraphQLite\Annotations\Field as GraphqlField;

/**
 * The AbstractUser class maps the 'users' table in database.
 */
abstract class AbstractUser extends \TheCodingMachine\TDBM\AbstractTDBMObject implements JsonSerializable
{

    /**
     * @var \TheCodingMachine\TDBM\Schema\ForeignKeys
     */
    private static $foreignKeys = null;

    /**
     * The constructor takes all compulsory arguments.
     *
     * @param \App\Domain\Model\UserType $type
     * @param string $firstName
     * @param string $lastName
     * @param string $email
     * @param string $phone
     */
    public function __construct(\App\Domain\Model\UserType $type, string $firstName, string $lastName, string $email, string $phone)
    {
        parent::__construct();
        $this->setType($type);
        $this->setFirstName($firstName);
        $this->setLastName($lastName);
        $this->setEmail($email);
        $this->setPhone($phone);
        $this->setId(Uuid::uuid1()->toString());
        $this->setStatus(true);
        $this->setCguAccepted(false);
        $this->setCivility('m');
        $this->setDeleted(false);
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     * @GraphqlField (outputType = "ID")
     */
    public function getId() : string
    {
        return $this->get('id', 'users');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'users');
    }

    /**
     * Returns the User object bound to this object via the coach_id column.
     *
     * @GraphqlField
     */
    public function getCoach() : ?\App\Domain\Model\User
    {
        return $this->getRef('from__coach_id__to__table__users__columns__id', 'users');
    }

    /**
     * The setter for the User object bound to this object via the coach_id column.
     */
    public function setCoach(?\App\Domain\Model\User $object) : void
    {
        $this->setRef('from__coach_id__to__table__users__columns__id', $object, 'users');
    }

    /**
     * Returns the UserType object bound to this object via the type_id column.
     *
     * @GraphqlField
     */
    public function getType() : \App\Domain\Model\UserType
    {
        return $this->getRef('from__type_id__to__table__users_types__columns__id', 'users');
    }

    /**
     * The setter for the UserType object bound to this object via the type_id column.
     */
    public function setType(\App\Domain\Model\UserType $object) : void
    {
        $this->setRef('from__type_id__to__table__users_types__columns__id', $object, 'users');
    }

    /**
     * Returns the Company object bound to this object via the company_id column.
     *
     * @GraphqlField
     */
    public function getCompany() : ?\App\Domain\Model\Company
    {
        return $this->getRef('from__company_id__to__table__companies__columns__id', 'users');
    }

    /**
     * The setter for the Company object bound to this object via the company_id
     * column.
     */
    public function setCompany(?\App\Domain\Model\Company $object) : void
    {
        $this->setRef('from__company_id__to__table__companies__columns__id', $object, 'users');
    }

    /**
     * Returns the FileDescriptor object bound to this object via the
     * profile_picture_id column.
     *
     * @GraphqlField
     */
    public function getProfilePicture() : ?\App\Domain\Model\FileDescriptor
    {
        return $this->getRef('from__profile_picture_id__to__table__file_descriptors__columns__id', 'users');
    }

    /**
     * The setter for the FileDescriptor object bound to this object via the
     * profile_picture_id column.
     */
    public function setProfilePicture(?\App\Domain\Model\FileDescriptor $object) : void
    {
        $this->setRef('from__profile_picture_id__to__table__file_descriptors__columns__id', $object, 'users');
    }

    /**
     * Returns the User object bound to this object via the created_by column.
     *
     * @GraphqlField
     */
    public function getCreatedBy() : ?\App\Domain\Model\User
    {
        return $this->getRef('from__created_by__to__table__users__columns__id', 'users');
    }

    /**
     * The setter for the User object bound to this object via the created_by column.
     */
    public function setCreatedBy(?\App\Domain\Model\User $object) : void
    {
        $this->setRef('from__created_by__to__table__users__columns__id', $object, 'users');
    }

    /**
     * Returns the User object bound to this object via the updated_by column.
     *
     * @GraphqlField
     */
    public function getUpdatedBy() : ?\App\Domain\Model\User
    {
        return $this->getRef('from__updated_by__to__table__users__columns__id', 'users');
    }

    /**
     * The setter for the User object bound to this object via the updated_by column.
     */
    public function setUpdatedBy(?\App\Domain\Model\User $object) : void
    {
        $this->setRef('from__updated_by__to__table__users__columns__id', $object, 'users');
    }

    /**
     * The getter for the "first_name" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getFirstName() : string
    {
        return $this->get('first_name', 'users');
    }

    /**
     * The setter for the "first_name" column.
     *
     * @param string $first_name
     */
    public function setFirstName(string $first_name) : void
    {
        $this->set('first_name', $first_name, 'users');
    }

    /**
     * The getter for the "last_name" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getLastName() : string
    {
        return $this->get('last_name', 'users');
    }

    /**
     * The setter for the "last_name" column.
     *
     * @param string $last_name
     */
    public function setLastName(string $last_name) : void
    {
        $this->set('last_name', $last_name, 'users');
    }

    /**
     * The getter for the "email" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getEmail() : string
    {
        return $this->get('email', 'users');
    }

    /**
     * The setter for the "email" column.
     *
     * @param string $email
     */
    public function setEmail(string $email) : void
    {
        $this->set('email', $email, 'users');
    }

    /**
     * The getter for the "phone" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getPhone() : string
    {
        return $this->get('phone', 'users');
    }

    /**
     * The setter for the "phone" column.
     *
     * @param string $phone
     */
    public function setPhone(string $phone) : void
    {
        $this->set('phone', $phone, 'users');
    }

    /**
     * The getter for the "password" column.
     *
     * @return string|null
     * @GraphqlField
     */
    public function getPassword() : ?string
    {
        return $this->get('password', 'users');
    }

    /**
     * The setter for the "password" column.
     *
     * @param string|null $password
     */
    public function setPassword(?string $password) : void
    {
        $this->set('password', $password, 'users');
    }

    /**
     * The getter for the "status" column.
     *
     * @return bool
     * @GraphqlField
     */
    public function getStatus() : bool
    {
        return $this->get('status', 'users');
    }

    /**
     * The setter for the "status" column.
     *
     * @param bool $status
     */
    public function setStatus(bool $status) : void
    {
        $this->set('status', $status, 'users');
    }

    /**
     * The getter for the "created_at" column.
     *
     * @return \DateTimeImmutable|null
     * @GraphqlField
     */
    public function getCreatedAt() : ?\DateTimeImmutable
    {
        return $this->get('created_at', 'users');
    }

    /**
     * The setter for the "created_at" column.
     *
     * @param \DateTimeImmutable|null $created_at
     */
    public function setCreatedAt(?\DateTimeImmutable $created_at) : void
    {
        $this->set('created_at', $created_at, 'users');
    }

    /**
     * The getter for the "updated_at" column.
     *
     * @return \DateTimeImmutable|null
     * @GraphqlField
     */
    public function getUpdatedAt() : ?\DateTimeImmutable
    {
        return $this->get('updated_at', 'users');
    }

    /**
     * The setter for the "updated_at" column.
     *
     * @param \DateTimeImmutable|null $updated_at
     */
    public function setUpdatedAt(?\DateTimeImmutable $updated_at) : void
    {
        $this->set('updated_at', $updated_at, 'users');
    }

    /**
     * The getter for the "cgu_accepted" column.
     *
     * @return bool
     * @GraphqlField
     */
    public function getCguAccepted() : bool
    {
        return $this->get('cgu_accepted', 'users');
    }

    /**
     * The setter for the "cgu_accepted" column.
     *
     * @param bool $cgu_accepted
     */
    public function setCguAccepted(bool $cgu_accepted) : void
    {
        $this->set('cgu_accepted', $cgu_accepted, 'users');
    }

    /**
     * The getter for the "civility" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getCivility() : string
    {
        return $this->get('civility', 'users');
    }

    /**
     * The setter for the "civility" column.
     *
     * @param string $civility
     */
    public function setCivility(string $civility) : void
    {
        $this->set('civility', $civility, 'users');
    }

    /**
     * The getter for the "linkedin" column.
     *
     * @return string|null
     * @GraphqlField
     */
    public function getLinkedin() : ?string
    {
        return $this->get('linkedin', 'users');
    }

    /**
     * The setter for the "linkedin" column.
     *
     * @param string|null $linkedin
     */
    public function setLinkedin(?string $linkedin) : void
    {
        $this->set('linkedin', $linkedin, 'users');
    }

    /**
     * The getter for the "address" column.
     *
     * @return string|null
     * @GraphqlField
     */
    public function getAddress() : ?string
    {
        return $this->get('address', 'users');
    }

    /**
     * The setter for the "address" column.
     *
     * @param string|null $address
     */
    public function setAddress(?string $address) : void
    {
        $this->set('address', $address, 'users');
    }

    /**
     * The getter for the "function" column.
     *
     * @return string|null
     * @GraphqlField
     */
    public function getFunction() : ?string
    {
        return $this->get('function', 'users');
    }

    /**
     * The setter for the "function" column.
     *
     * @param string|null $function
     */
    public function setFunction(?string $function) : void
    {
        $this->set('function', $function, 'users');
    }

    /**
     * The getter for the "seniority_date" column.
     *
     * @return \DateTimeImmutable|null
     * @GraphqlField
     */
    public function getSeniorityDate() : ?\DateTimeImmutable
    {
        return $this->get('seniority_date', 'users');
    }

    /**
     * The setter for the "seniority_date" column.
     *
     * @param \DateTimeImmutable|null $seniority_date
     */
    public function setSeniorityDate(?\DateTimeImmutable $seniority_date) : void
    {
        $this->set('seniority_date', $seniority_date, 'users');
    }

    /**
     * The getter for the "previous_function" column.
     *
     * @return string|null
     * @GraphqlField
     */
    public function getPreviousFunction() : ?string
    {
        return $this->get('previous_function', 'users');
    }

    /**
     * The setter for the "previous_function" column.
     *
     * @param string|null $previous_function
     */
    public function setPreviousFunction(?string $previous_function) : void
    {
        $this->set('previous_function', $previous_function, 'users');
    }

    /**
     * The getter for the "deleted" column.
     *
     * @return bool
     * @GraphqlField
     */
    public function getDeleted() : bool
    {
        return $this->get('deleted', 'users');
    }

    /**
     * The setter for the "deleted" column.
     *
     * @param bool $deleted
     */
    public function setDeleted(bool $deleted) : void
    {
        $this->set('deleted', $deleted, 'users');
    }

    /**
     * Returns the list of Company pointing to this bean via the updated_by column.
     *
     * @return Company[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getCompaniesByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('companies', 'from__updated_by__to__table__users__columns__id', ['companies.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Company pointing to this bean via the created_by column.
     *
     * @return Company[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getCompaniesByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('companies', 'from__created_by__to__table__users__columns__id', ['companies.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Document pointing to this bean via the updated_by column.
     *
     * @return Document[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getDocumentsByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('documents', 'from__updated_by__to__table__users__columns__id', ['documents.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Document pointing to this bean via the author column.
     *
     * @return Document[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getDocumentsByAuthor() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('documents', 'from__author__to__table__users__columns__id', ['documents.author' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Document pointing to this bean via the created_by column.
     *
     * @return Document[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getDocumentsByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('documents', 'from__created_by__to__table__users__columns__id', ['documents.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of EventModel pointing to this bean via the updated_by column.
     *
     * @return EventModel[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getEventModelsByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('event_models', 'from__updated_by__to__table__users__columns__id', ['event_models.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of EventModel pointing to this bean via the created_by column.
     *
     * @return EventModel[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getEventModelsByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('event_models', 'from__created_by__to__table__users__columns__id', ['event_models.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Event pointing to this bean via the updated_by column.
     *
     * @return Event[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getEventsByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('events', 'from__updated_by__to__table__users__columns__id', ['events.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Event pointing to this bean via the organizer column.
     *
     * @return Event[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getEventsByOrganizer() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('events', 'from__organizer__to__table__users__columns__id', ['events.organizer' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Event pointing to this bean via the created_by column.
     *
     * @return Event[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getEventsByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('events', 'from__created_by__to__table__users__columns__id', ['events.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of FileDescriptor pointing to this bean via the updated_by column.
     *
     * @return FileDescriptor[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getFileDescriptorsByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('file_descriptors', 'from__updated_by__to__table__users__columns__id', ['file_descriptors.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of FileDescriptor pointing to this bean via the created_by column.
     *
     * @return FileDescriptor[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getFileDescriptorsByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('file_descriptors', 'from__created_by__to__table__users__columns__id', ['file_descriptors.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of ProgramModel pointing to this bean via the updated_by column.
     *
     * @return ProgramModel[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getProgramModelsByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('program_models', 'from__updated_by__to__table__users__columns__id', ['program_models.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of ProgramModel pointing to this bean via the created_by column.
     *
     * @return ProgramModel[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getProgramModelsByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('program_models', 'from__created_by__to__table__users__columns__id', ['program_models.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Program pointing to this bean via the updated_by column.
     *
     * @return Program[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getProgramsByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('programs', 'from__updated_by__to__table__users__columns__id', ['programs.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Program pointing to this bean via the coach_id column.
     *
     * @return Program[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getProgramsByCoachId() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('programs', 'from__coach_id__to__table__users__columns__id', ['programs.coach_id' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Program pointing to this bean via the created_by column.
     *
     * @return Program[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getProgramsByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('programs', 'from__created_by__to__table__users__columns__id', ['programs.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of ResetPasswordToken pointing to this bean via the user_id column.
     *
     * @return ResetPasswordToken[]|\TheCodingMachine\TDBM\AlterableResultIterator
     */
    public function getResetPasswordTokens() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('reset_password_tokens', 'from__user_id__to__table__users__columns__id', ['reset_password_tokens.user_id' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Role pointing to this bean via the updated_by column.
     *
     * @return Role[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getRolesByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('roles', 'from__updated_by__to__table__users__columns__id', ['roles.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Role pointing to this bean via the created_by column.
     *
     * @return Role[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getRolesByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('roles', 'from__created_by__to__table__users__columns__id', ['roles.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of UpdateEmailToken pointing to this bean via the user_id column.
     *
     * @return UpdateEmailToken[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getUpdateEmailTokens() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('update_email_tokens', 'from__user_id__to__table__users__columns__id', ['update_email_tokens.user_id' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of User pointing to this bean via the updated_by column.
     *
     * @return User[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getUsersByUpdatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('users', 'from__updated_by__to__table__users__columns__id', ['users.updated_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of User pointing to this bean via the coach_id column.
     *
     * @return User[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getUsersByCoachId() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('users', 'from__coach_id__to__table__users__columns__id', ['users.coach_id' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of User pointing to this bean via the created_by column.
     *
     * @return User[]|\TheCodingMachine\TDBM\AlterableResultIterator
     * @GraphqlField
     */
    public function getUsersByCreatedBy() : \TheCodingMachine\TDBM\AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('users', 'from__created_by__to__table__users__columns__id', ['users.created_by' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Event associated to this bean via the events_users pivot table.
     *
     * @return \App\Domain\Model\Event[]
     * @GraphqlField
     */
    public function getEventsByEventsUsers() : array
    {
        return $this->_getRelationships('events_users.user_id');
    }

    /**
     * Adds a relationship with Event associated to this bean via the events_users pivot table.
     *
     * @param \App\Domain\Model\Event $event
     */
    public function addEventByEventsUsers(\App\Domain\Model\Event $event) : void
    {
        $this->addRelationship('events_users', $event);
    }

    /**
     * Deletes the relationship with Event associated to this bean via the events_users pivot table.
     *
     * @param \App\Domain\Model\Event $event
     */
    public function removeEventByEventsUsers(\App\Domain\Model\Event $event) : void
    {
        $this->_removeRelationship('events_users', $event);
    }

    /**
     * Returns whether this bean is associated with Event via the events_users pivot table.
     *
     * @param \App\Domain\Model\Event $event
     * @return bool
     */
    public function hasEventByEventsUsers(\App\Domain\Model\Event $event) : bool
    {
        return $this->hasRelationship('events_users.user_id', $event);
    }

    /**
     * Sets all relationships with Event associated to this bean via the events_users pivot table.
     * Exiting relationships will be removed and replaced by the provided relationships.
     *
     * @param \App\Domain\Model\Event[] $events
     * @return void
     */
    public function setEventsByEventsUsers(array $events) : void
    {
        $this->setRelationships('events_users.user_id', $events);
    }

    /**
     * Returns the list of Program associated to this bean via the programs_users pivot table.
     *
     * @return \App\Domain\Model\Program[]
     * @GraphqlField
     */
    public function getProgramsByProgramsUsers() : array
    {
        return $this->_getRelationships('programs_users.user_id');
    }

    /**
     * Adds a relationship with Program associated to this bean via the programs_users pivot table.
     *
     * @param \App\Domain\Model\Program $program
     */
    public function addProgramByProgramsUsers(\App\Domain\Model\Program $program) : void
    {
        $this->addRelationship('programs_users', $program);
    }

    /**
     * Deletes the relationship with Program associated to this bean via the programs_users pivot table.
     *
     * @param \App\Domain\Model\Program $program
     */
    public function removeProgramByProgramsUsers(\App\Domain\Model\Program $program) : void
    {
        $this->_removeRelationship('programs_users', $program);
    }

    /**
     * Returns whether this bean is associated with Program via the programs_users pivot table.
     *
     * @param \App\Domain\Model\Program $program
     * @return bool
     */
    public function hasProgramByProgramsUsers(\App\Domain\Model\Program $program) : bool
    {
        return $this->hasRelationship('programs_users.user_id', $program);
    }

    /**
     * Sets all relationships with Program associated to this bean via the programs_users pivot table.
     * Exiting relationships will be removed and replaced by the provided relationships.
     *
     * @param \App\Domain\Model\Program[] $programs
     * @return void
     */
    public function setProgramsByProgramsUsers(array $programs) : void
    {
        $this->setRelationships('programs_users.user_id', $programs);
    }

    /**
     * Returns the list of Role associated to this bean via the users_roles pivot table.
     *
     * @return \App\Domain\Model\Role[]
     * @GraphqlField
     */
    public function getRolesByUsersRoles() : array
    {
        return $this->_getRelationships('users_roles.user_id');
    }

    /**
     * Adds a relationship with Role associated to this bean via the users_roles pivot table.
     *
     * @param \App\Domain\Model\Role $role
     */
    public function addRoleByUsersRoles(\App\Domain\Model\Role $role) : void
    {
        $this->addRelationship('users_roles', $role);
    }

    /**
     * Deletes the relationship with Role associated to this bean via the users_roles pivot table.
     *
     * @param \App\Domain\Model\Role $role
     */
    public function removeRoleByUsersRoles(\App\Domain\Model\Role $role) : void
    {
        $this->_removeRelationship('users_roles', $role);
    }

    /**
     * Returns whether this bean is associated with Role via the users_roles pivot table.
     *
     * @param \App\Domain\Model\Role $role
     * @return bool
     */
    public function hasRoleByUsersRoles(\App\Domain\Model\Role $role) : bool
    {
        return $this->hasRelationship('users_roles.user_id', $role);
    }

    /**
     * Sets all relationships with Role associated to this bean via the users_roles pivot table.
     * Exiting relationships will be removed and replaced by the provided relationships.
     *
     * @param \App\Domain\Model\Role[] $roles
     * @return void
     */
    public function setRolesByUsersRoles(array $roles) : void
    {
        $this->setRelationships('users_roles.user_id', $roles);
    }

    /**
     * Get the paths used for many to many relationships methods.
     *
     * @internal
     */
    public function _getManyToManyRelationshipDescriptor(string $pathKey) : \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor
    {
        switch ($pathKey) {
            case 'events_users.user_id':
                return new \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor('events', 'events_users', ['id'], ['event_id'], ['user_id']);
            case 'programs_users.user_id':
                return new \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor('programs', 'programs_users', ['id'], ['program_id'], ['user_id']);
            case 'users_roles.user_id':
                return new \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor('roles', 'users_roles', ['id'], ['role_id'], ['user_id']);
            default:
                return parent::_getManyToManyRelationshipDescriptor($pathKey);
        }
    }

    /**
     * Returns the list of keys supported for many to many relationships
     *
     * @internal
     * @return string[]
     */
    public function _getManyToManyRelationshipDescriptorKeys() : array
    {
        return array_merge(parent::_getManyToManyRelationshipDescriptorKeys(), ['events_users.user_id', 'programs_users.user_id', 'users_roles.user_id']);
    }

    /**
     * Internal method used to retrieve the list of foreign keys attached to this bean.
     */
    protected static function getForeignKeys(string $tableName) : \TheCodingMachine\TDBM\Schema\ForeignKeys
    {
        if ($tableName === 'users') {
            if (self::$foreignKeys === null) {
                self::$foreignKeys = new ForeignKeys([
                    'from__coach_id__to__table__users__columns__id' => [
                        'foreignTable' => 'users',
                        'localColumns' => [
                            'coach_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ],
                    'from__company_id__to__table__companies__columns__id' => [
                        'foreignTable' => 'companies',
                        'localColumns' => [
                            'company_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ],
                    'from__created_by__to__table__users__columns__id' => [
                        'foreignTable' => 'users',
                        'localColumns' => [
                            'created_by'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ],
                    'from__profile_picture_id__to__table__file_descriptors__columns__id' => [
                        'foreignTable' => 'file_descriptors',
                        'localColumns' => [
                            'profile_picture_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ],
                    'from__type_id__to__table__users_types__columns__id' => [
                        'foreignTable' => 'users_types',
                        'localColumns' => [
                            'type_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ],
                    'from__updated_by__to__table__users__columns__id' => [
                        'foreignTable' => 'users',
                        'localColumns' => [
                            'updated_by'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ]
                ]);
            }
            return self::$foreignKeys;
        }
        return parent::getForeignKeys($tableName);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded
     * objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize(bool $stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        if ($stopRecursion) {
            $array['coach'] = ($object = $this->getCoach()) ? ['id' => $object->getId()] : null;
        } else {
            $array['coach'] = ($object = $this->getCoach()) ? $object->jsonSerialize(true) : null;
        }
        if ($stopRecursion) {
            $array['type'] = ['id' => $this->getType()->getId()];
        } else {
            $array['type'] = $this->getType()->jsonSerialize(true);
        }
        if ($stopRecursion) {
            $array['company'] = ($object = $this->getCompany()) ? ['id' => $object->getId()] : null;
        } else {
            $array['company'] = ($object = $this->getCompany()) ? $object->jsonSerialize(true) : null;
        }
        if ($stopRecursion) {
            $array['profilePicture'] = ($object = $this->getProfilePicture()) ? ['id' => $object->getId()] : null;
        } else {
            $array['profilePicture'] = ($object = $this->getProfilePicture()) ? $object->jsonSerialize(true) : null;
        }
        if ($stopRecursion) {
            $array['createdBy'] = ($object = $this->getCreatedBy()) ? ['id' => $object->getId()] : null;
        } else {
            $array['createdBy'] = ($object = $this->getCreatedBy()) ? $object->jsonSerialize(true) : null;
        }
        if ($stopRecursion) {
            $array['updatedBy'] = ($object = $this->getUpdatedBy()) ? ['id' => $object->getId()] : null;
        } else {
            $array['updatedBy'] = ($object = $this->getUpdatedBy()) ? $object->jsonSerialize(true) : null;
        }
        $array['firstName'] = $this->getFirstName();
        $array['lastName'] = $this->getLastName();
        $array['email'] = $this->getEmail();
        $array['phone'] = $this->getPhone();
        $array['password'] = $this->getPassword();
        $array['status'] = $this->getStatus();
        $array['createdAt'] = ($date = $this->getCreatedAt()) ? $date->format('c') : null;
        $array['updatedAt'] = ($date = $this->getUpdatedAt()) ? $date->format('c') : null;
        $array['cguAccepted'] = $this->getCguAccepted();
        $array['civility'] = $this->getCivility();
        $array['linkedin'] = $this->getLinkedin();
        $array['address'] = $this->getAddress();
        $array['function'] = $this->getFunction();
        $array['seniorityDate'] = ($date = $this->getSeniorityDate()) ? $date->format('c') : null;
        $array['previousFunction'] = $this->getPreviousFunction();
        $array['deleted'] = $this->getDeleted();
        if (!$stopRecursion) {
            $array['eventsByEventsUsers'] = array_map(function (Event $object) {
                return $object->jsonSerialize(true);
            }, $this->getEventsByEventsUsers());
        };
        if (!$stopRecursion) {
            $array['programsByProgramsUsers'] = array_map(function (Program $object) {
                return $object->jsonSerialize(true);
            }, $this->getProgramsByProgramsUsers());
        };
        if (!$stopRecursion) {
            $array['rolesByUsersRoles'] = array_map(function (Role $object) {
                return $object->jsonSerialize(true);
            }, $this->getRolesByUsersRoles());
        };
        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child
     * relationship).
     *
     * @return string[]
     */
    public function getUsedTables() : array
    {
        return [ 'users' ];
    }

    /**
     * Method called when the bean is removed from database.
     */
    public function onDelete() : void
    {
        parent::onDelete();
        $this->setRef('from__coach_id__to__table__users__columns__id', null, 'users');
        $this->setRef('from__type_id__to__table__users_types__columns__id', null, 'users');
        $this->setRef('from__company_id__to__table__companies__columns__id', null, 'users');
        $this->setRef('from__profile_picture_id__to__table__file_descriptors__columns__id', null, 'users');
        $this->setRef('from__created_by__to__table__users__columns__id', null, 'users');
        $this->setRef('from__updated_by__to__table__users__columns__id', null, 'users');
    }

    public function __clone()
    {
        $this->getEventsByEventsUsers();

        $this->getProgramsByProgramsUsers();

        $this->getRolesByUsersRoles();

        parent::__clone();
        $this->setId(Uuid::uuid1()->toString());
    }
}
