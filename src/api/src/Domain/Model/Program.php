<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Model;

use App\Domain\Enum\ProgramTypeEnum;
use App\Domain\Exception\InvalidDateValue;
use App\Domain\Exception\InvalidStringValue;
use App\Domain\Logging\LoggableModel;
use App\Domain\Model\Generated\AbstractProgram;
use DateTimeImmutable as UnsafeDateTimeImmutable;
use Safe\DateTimeImmutable;
use TheCodingMachine\GraphQLite\Annotations\Type;
use function in_array;
use function Safe\sprintf;

/**
 * The Program class maps the 'programs' table in database.
 *
 * @Type
 */
class Program extends AbstractProgram implements LoggableModel
{
    /**
     * @throws InvalidStringValue
     */
    public function setName(string $name): void
    {
        $property = 'name';
        InvalidStringValue::notBlank($name, $property);
        InvalidStringValue::length($name, 1, 255, $property);
        parent::setName($name);
    }

    /**
     * @throws InvalidDateValue
     */
    public function setDateStart(?UnsafeDateTimeImmutable $dateStart): void
    {
        if (! empty($dateStart)) {
            $property = 'dateStart';
            InvalidDateValue::isDateSuperior($dateStart, new DateTimeImmutable(), $property);
            if ($this->getDateEnd() !== null) {
                InvalidDateValue::isDateSuperior($this->getDateEnd(), $dateStart, $property);
            }
        }
        parent::setDateStart($dateStart);
    }

    /**
     * @throws InvalidDateValue
     */
    public function setDateEnd(?UnsafeDateTimeImmutable $dateEnd): void
    {
        if (! empty($dateEnd)) {
            $property = 'dateEnd';
            InvalidDateValue::isDateSuperior($dateEnd, new DateTimeImmutable(), $property);
            if ($this->getDateStart() !== null) {
                InvalidDateValue::isDateSuperior($dateEnd, $this->getDateStart(), $property);
            }
        }
        parent::setDateEnd($dateEnd);
    }

    /**
     * @throws InvalidStringValue
     */
    public function setType(string $type): void
    {
        if (! in_array($type, ProgramTypeEnum::values())) {
            throw new InvalidStringValue(sprintf('The type %s is not one of the valid types', $type), 400);
        }
        parent::setType($type);
    }
}
