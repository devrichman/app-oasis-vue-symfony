<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Exception\NotFound;
use App\Domain\Model\EventModel;
use App\Domain\Repository\EventModelRepository;
use App\Domain\Repository\UserRepository;
use App\Infrastructure\Dao\Generated\AbstractEventModelDao;
use App\Infrastructure\Logging\ModelLogger;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMService;

/**
 * The EventModelDao class will maintain the persistence of EventModel class into the event_models table.
 */
class EventModelDao extends AbstractEventModelDao implements EventModelRepository
{
    use ModelLogger;

    public const SORT_COLUMNS = [
        'name' => 'name',
        'description' => 'description',
        'type' => 'type',
        'updatedAt' => 'updated_at',
    ];

    private TokenStorageInterface $tokenStorage;
    private UserRepository $userRepository;

    public function __construct(TDBMService $tdbmService, TokenStorageInterface $tokenStorage, UserRepository $userRepository)
    {
        $this->tokenStorage = $tokenStorage;
        $this->userRepository = $userRepository;
        parent::__construct($tdbmService);
    }

    protected function getTokenStorage(): TokenStorageInterface
    {
        return $this->tokenStorage;
    }

    protected function getUserRepository(): UserRepository
    {
        return $this->userRepository;
    }

    public function save(EventModel $eventModel): void
    {
        $this->log($eventModel);
        parent::save($eventModel);
    }

    public function mustFindOneById(string $id): EventModel
    {
        $event = $this->findOne(['id' => $id]);
        if ($event === null) {
            throw new NotFound(EventModel::class, ['id' => $id]);
        }

        return $event;
    }

    public function findByFilters(?string $search = null, ?string $sortColumn = 'createdAt', ?string $sortDirection = 'desc'): ResultIterator
    {
        $filters = ['deleted = 0'];
        $parameters = [];

        if (! empty($search)) {
            $filters[] = 'name LIKE :search OR description LIKE :search OR type LIKE :search';
            $parameters['search'] = '%' . $search . '%';
        }

        $orderBy = '';
        if (isset(self::SORT_COLUMNS[$sortColumn])) {
            $orderBy = self::SORT_COLUMNS[$sortColumn] . ' ' . ($sortDirection === 'desc' ? 'DESC' : 'ASC');
        }

        return $this->find($filters, $parameters, $orderBy);
    }
}
