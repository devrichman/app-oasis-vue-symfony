<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Exception\NotFound;
use App\Domain\Model\Role;
use App\Domain\Repository\RoleRepository;
use App\Infrastructure\Dao\Generated\AbstractRoleDao;
use TheCodingMachine\TDBM\ResultIterator;
use function count;

/**
 * The RoleDao class will maintain the persistence of Role class into the roles table.
 */
class RoleDao extends AbstractRoleDao implements RoleRepository
{
    public const SORT_COLUMN = ['name' => 'name'];

    /**
     * @throws NotFound
     */
    public function mustFindOneById(string $id): Role
    {
        $role = $this->findOne(['id' => $id]);
        if ($role === null) {
            throw new NotFound(Role::class, ['id' => $id]);
        }

        return $role;
    }

    /**
     * @throws NotFound
     */
    public function mustFindOneWithNoUsers(string $id): Role
    {
        $role = $this->findOne(['id' => $id]);
        if ($role === null || $role->getUsersCount() > 0) {
            throw new NotFound(Role::class, ['id' => $id]);
        }

        return $role;
    }

    public function findByFilters(?string $search = null, ?bool $displayable = true, ?string $sortColumn = null, ?string $sortDirection = null): ResultIterator
    {
        $filters = [];
        $parameters = [];
        if (! empty($search)) {
            $filters[] = 'name LIKE :search OR description LIKE :search';
            $parameters['search'] = '%' . $search . '%';
        }

        if ($displayable) {
            $filters[] = 'displayable = :displayable';
            $parameters['displayable'] = 1;
        }

        $orderBy = 'name ASC';
        if (! empty($sortColumn) && isset(self::SORT_COLUMN[$sortColumn])) {
            $orderDirection = $sortDirection === 'asc' ? 'ASC' : 'DESC';
            $orderBy = self::SORT_COLUMN[$sortColumn] . ' ' . $orderDirection;
        }

        return $this->find($filters, $parameters, $orderBy);
    }

    public function checkNameUnique(string $name, ?string $roleId = null): bool
    {
        $query = $this->tdbmService->getConnection()->executeQuery('
            SELECT id FROM roles
            WHERE name = :name' . ($roleId !== null ? ' AND id != :roleId' : '') . '
            LIMIT 1
        ', ['name' => $name, 'roleId' => $roleId]);

        return count($query->fetchAll()) === 0;
    }
}
