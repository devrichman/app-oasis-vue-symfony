<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Exception\NotFound;
use App\Domain\Model\Document;
use App\Domain\Repository\DocumentRepository;
use App\Domain\Repository\UserRepository;
use App\Infrastructure\Dao\Generated\AbstractDocumentDao;
use App\Infrastructure\Logging\ModelLogger;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMService;
use function explode;
use function in_array;
use function strtolower;

/**
 * The DocumentDao class will maintain the persistence of Document class into the documents table.
 */
class DocumentDao extends AbstractDocumentDao implements DocumentRepository
{
    use ModelLogger;

    private TokenStorageInterface $tokenStorage;
    private UserRepository $userRepository;

    public const SORT_COLUMNS = [
        'name' => 'name',
        'createdAt' => 'created_at',
    ];

    public const AVOID_SEARCH = [
        'le',
        'de',
        'la',
        'un',
        'les',
        'des',
    ];

    public function __construct(TDBMService $tdbmService, TokenStorageInterface $tokenStorage, UserRepository $userRepository)
    {
        $this->tokenStorage = $tokenStorage;
        $this->userRepository = $userRepository;
        parent::__construct($tdbmService);
    }

    public function save(Document $document): void
    {
        $this->log($document);
        parent::save($document);
    }

    /**
     * @throws NotFound
     */
    public function mustFindOneById(string $id): Document
    {
        $document = $this->findOne(['id' => $id]);
        if ($document === null) {
            throw new NotFound(Document::class, ['id' => $id]);
        }

        return $document;
    }

    /**
     * @return Document[]|ResultIterator
     */
    public function findByFilters(?string $search = null, ?string $visibility = null, ?string $sortColumn = null, ?string $sortDirection = null): ResultIterator
    {
        $query = 'documents';

        $filters = ['deleted = 0'];
        $parameter = [];

        if (! empty($search)) {
            $searchList = explode(' ', $search);
            foreach ($searchList as $key => $value) {
                if (in_array(strtolower($value), self::AVOID_SEARCH)) {
                    continue;
                }

                $filters[] = '(name LIKE :value' . $key . ' OR description LIKE :value' . $key . ')';
                $parameter['value' . $key] = '%' . $value . '%';
            }
        }

        if (! empty($visibility)) {
            $filters[] = 'visibility = :visibility';
            $parameter['visibility'] = $visibility;
        }

        $orderBy = null;
        if (! empty($sortColumn) && isset(self::SORT_COLUMNS[$sortColumn])) {
            $orderBy = self::SORT_COLUMNS[$sortColumn] . ' ' . ($sortDirection === 'asc' ? 'ASC' : 'DESC');
        }

        return $this->findFromSql($query, $filters, $parameter, $orderBy);
    }

    protected function getTokenStorage(): TokenStorageInterface
    {
        return $this->tokenStorage;
    }

    protected function getUserRepository(): UserRepository
    {
        return $this->userRepository;
    }
}
